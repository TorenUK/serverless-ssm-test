"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _fs = _interopRequireDefault(require("fs"));
var _awsSdk = require("aws-sdk");
var _log = require("@serverless/utils/log");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
class ServerlessSsmPlugin {
  constructor(serverless, options) {
    var _process$env$SECRETS_;
    _defineProperty(this, "hooks", void 0);
    _defineProperty(this, "options", void 0);
    _defineProperty(this, "serverless", void 0);
    _defineProperty(this, "region", void 0);
    _defineProperty(this, "secretsFile", void 0);
    this.hooks = {
      'before:package:createDeploymentArtifacts': this.packageSecrets.bind(this),
      'after:package:createDeploymentArtifacts': this.cleanupPackageSecrets.bind(this),
      'before:deploy:function:packageFunction': this.packageSecrets.bind(this),
      'after:deploy:function:packageFunction': this.cleanupPackageSecrets.bind(this),
      // For serverless-offline plugin
      'before:offline:start:init': this.packageSecrets.bind(this),
      'before:offline:start:end': this.cleanupPackageSecrets.bind(this),
      // For invoke local
      'before:invoke:local:invoke': this.packageSecrets.bind(this),
      'after:invoke:local:invoke': this.cleanupPackageSecrets.bind(this)
    };
    this.options = options;
    this.serverless = serverless;
    this.region = serverless.service.provider.region;
    this.secretsFile = (_process$env$SECRETS_ = process.env.SECRETS_FILE_PATH) !== null && _process$env$SECRETS_ !== void 0 ? _process$env$SECRETS_ : 'secrets.json';
  }
  async writeEnvironmentSecretToFile() {
    const providerSecrets = this.serverless.service.provider.environment['API_ENV_SECRET_NAME'];
    const secrets = {};

    // modify this function to return the secrets
    if (!providerSecrets) {
      throw new this.serverless.classes.Error(`Unable to find the environment variable for ${providerSecrets}`);
    }
    const param = await this.getParameterFromSsm(providerSecrets);
    if (!param) {
      throw new this.serverless.classes.Error(`Unable to load Secret ${providerSecrets}`);
    }
    secrets[providerSecrets] = param;
    return _fs.default.promises.writeFile(this.secretsFile, JSON.stringify(secrets));
  }
  async getParameterFromSsm(name) {
    const client = new _awsSdk.SecretsManager({
      region: this.region,
      ...this.serverless.providers.aws.getCredentials()
    });
    const data = await client.getSecretValue({
      SecretId: name
    }).promise();
    return data.SecretString;
  }
  async cleanupPackageSecrets() {
    (0, _log.log)(`Cleaning up ${this.secretsFile}`);
    if (_fs.default.existsSync(this.secretsFile)) {
      await _fs.default.promises.unlink(this.secretsFile);
    }
  }
  async packageSecrets() {
    var _this$serverless$serv;
    if (this.serverless.service.provider.stage === 'local') {
      (0, _log.log)('Skipping secret packaging due to stage = local');
      return;
    }
    (0, _log.log)('Serverless Secrets beginning packaging process');
    this.serverless.service.package.include = (_this$serverless$serv = this.serverless.service.package.include) !== null && _this$serverless$serv !== void 0 ? _this$serverless$serv : [];
    await this.writeEnvironmentSecretToFile();
    this.serverless.service.package.include.push(this.secretsFile);
  }
}
exports.default = ServerlessSsmPlugin;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,